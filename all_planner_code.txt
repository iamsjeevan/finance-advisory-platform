====================================================================
📁 FILE: src/pages/AIFinancialPlanner.tsx
====================================================================
import { useState } from "react";
import MainLayout from "../layouts/MainLayout";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ChartLine, Upload, DollarSign, FileText, PiggyBank, Clock, Shield, Target, MessageSquare } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { 
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage 
} from "@/components/ui/form";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

// Define form schema with Zod
const formSchema = z.object({
  // Personal Financial Information
  monthlySalary: z.string().min(1, "Monthly salary is required"),
  monthlyExpenses: z.string().min(1, "Monthly expenses are required"),
  investmentAmount: z.string().min(1, "Investment amount is required"),
  insuranceDetails: z.string().optional(),
  
  // Financial Goals
  goalDescription: z.string().min(10, "Please provide a detailed description of your goal"),
  targetAmount: z.string().min(1, "Target amount is required"),
  timeframe: z.string().min(1, "Timeframe is required"),
  
  // Additional Details
  additionalComments: z.string().optional(),
});

const AIFinancialPlanner = () => {
  const { toast } = useToast();
  const [file, setFile] = useState<File | null>(null);
  const [fileError, setFileError] = useState<string | null>(null);
  
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      monthlySalary: "",
      monthlyExpenses: "",
      investmentAmount: "",
      insuranceDetails: "",
      goalDescription: "",
      targetAmount: "",
      timeframe: "",
      additionalComments: "",
    },
  });
  
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0];
    setFileError(null);
    
    if (!selectedFile) {
      setFile(null);
      return;
    }
    
    // Check file type
    const allowedTypes = ['application/pdf', 'image/jpeg', 'image/png'];
    if (!allowedTypes.includes(selectedFile.type)) {
      setFileError("Please upload a PDF or image file (JPEG, PNG)");
      setFile(null);
      return;
    }
    
    // Check file size (max 5MB)
    if (selectedFile.size > 5 * 1024 * 1024) {
      setFileError("File size must be less than 5MB");
      setFile(null);
      return;
    }
    
    setFile(selectedFile);
  };
  
  const onSubmit = (data: z.infer<typeof formSchema>) => {
    if (!file) {
      setFileError("Please upload your passbook");
      return;
    }
    
    // Here you would typically send the data to your backend
    console.log("Form data:", data);
    console.log("File:", file);
    
    // Show success toast
    toast({
      title: "Financial plan request submitted",
      description: "Our AI is now processing your information. We'll notify you when your personalized plan is ready.",
    });
    
    // Reset form
    form.reset();
    setFile(null);
  };
  
  return (
    <MainLayout>
      <div className="container max-w-4xl px-4 pt-24 pb-16 mx-auto">
        <div className="mb-8 text-center">
          <h1 className="text-3xl font-bold tracking-tight md:text-4xl mb-2">AI Financial Planner</h1>
          <p className="text-muted-foreground max-w-3xl mx-auto">
            Complete the form below to receive a personalized financial plan tailored to your goals and current situation.
          </p>
        </div>
        
        <div className="bg-card border rounded-lg shadow-sm p-6">
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
              <Tabs defaultValue="personal" className="w-full">
                {/* Wrapper to prevent layout shift */}
                <div className="overflow-hidden w-full">
                  <TabsList className="mb-4 mt-2 w-full flex flex-wrap gap-x-4 justify-start">
                    <TabsTrigger value="personal" className="flex items-center gap-2">
                      <DollarSign size={16} />
                      <span>Personal Information</span>
                    </TabsTrigger>
                    <TabsTrigger value="goals" className="flex items-center gap-2">
                      <Target size={16} />
                      <span>Financial Goals</span>
                    </TabsTrigger>
                    <TabsTrigger value="documents" className="flex items-center gap-2">
                      <FileText size={16} />
                      <span>Documents</span>
                    </TabsTrigger>
                  </TabsList>
                
                  <TabsContent value="personal" className="space-y-6">
                    <div className="flex items-center space-x-2 mb-4">
                      <ChartLine className="h-5 w-5 text-primary" />
                      <h2 className="text-xl font-semibold">Personal Financial Information</h2>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="monthlySalary"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="flex items-center gap-2">
                              <DollarSign className="h-4 w-4" />
                              Monthly Salary
                            </FormLabel>
                            <FormControl>
                              <div className="relative">
                                <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">$</span>
                                <Input className="pl-8" placeholder="5,000" {...field} />
                              </div>
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="monthlyExpenses"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="flex items-center gap-2">
                              <DollarSign className="h-4 w-4" />
                              Monthly Expenses
                            </FormLabel>
                            <FormControl>
                              <div className="relative">
                                <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">$</span>
                                <Input className="pl-8" placeholder="3,000" {...field} />
                              </div>
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="investmentAmount"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="flex items-center gap-2">
                              <PiggyBank className="h-4 w-4" />
                              Investment Amount
                            </FormLabel>
                            <FormControl>
                              <div className="relative">
                                <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">$</span>
                                <Input className="pl-8" placeholder="1,000" {...field} />
                              </div>
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="insuranceDetails"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="flex items-center gap-2">
                              <Shield className="h-4 w-4" />
                              Insurance Details (Optional)
                            </FormLabel>
                            <FormControl>
                              <Input placeholder="Health, Life, etc." {...field} />
                            </FormControl>
                            <FormDescription>
                              List any insurance policies you currently have
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </TabsContent>
                  
                  <TabsContent value="goals" className="space-y-6">
                    <div className="flex items-center space-x-2 mb-4">
                      <Target className="h-5 w-5 text-primary" />
                      <h2 className="text-xl font-semibold">Financial Goals</h2>
                    </div>
                    
                    <FormField
                      control={form.control}
                      name="goalDescription"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="flex items-center gap-2">
                            <Target className="h-4 w-4" />
                            Goal Description
                          </FormLabel>
                          <FormControl>
                            <Textarea 
                              placeholder="Describe what you want to achieve financially (e.g., saving for a home, retirement, education)" 
                              className="min-h-[120px]" 
                              {...field} 
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <FormField
                        control={form.control}
                        name="targetAmount"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="flex items-center gap-2">
                              <DollarSign className="h-4 w-4" />
                              Target Amount
                            </FormLabel>
                            <FormControl>
                              <div className="relative">
                                <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">$</span>
                                <Input className="pl-8" placeholder="100,000" {...field} />
                              </div>
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="timeframe"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="flex items-center gap-2">
                              <Clock className="h-4 w-4" />
                              Timeframe
                            </FormLabel>
                            <Select 
                              onValueChange={field.onChange} 
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select timeframe" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="1">Less than 1 year</SelectItem>
                                <SelectItem value="1-3">1-3 years</SelectItem>
                                <SelectItem value="3-5">3-5 years</SelectItem>
                                <SelectItem value="5-10">5-10 years</SelectItem>
                                <SelectItem value="10+">10+ years</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </TabsContent>
                  
                  <TabsContent value="documents" className="space-y-6">
                    <div className="flex items-center space-x-2 mb-4">
                      <FileText className="h-5 w-5 text-primary" />
                      <h2 className="text-xl font-semibold">Document Upload</h2>
                    </div>
                    
                    <div className="space-y-4">
                      <div>
                        <Label htmlFor="passbook" className="flex items-center gap-2 mb-2">
                          <Upload className="h-4 w-4" />
                          Passbook Upload
                        </Label>
                        <div className="border-2 border-dashed rounded-md px-6 py-8 text-center">
                          <Input 
                            id="passbook" 
                            type="file" 
                            className="hidden" 
                            onChange={handleFileChange}
                            accept=".pdf,.jpg,.jpeg,.png"
                          />
                          <div className="flex flex-col items-center">
                            <Upload className="h-10 w-10 text-muted-foreground mb-2" />
                            <p className="mb-1 font-medium">Drag and drop or click to upload</p>
                            <p className="text-sm text-muted-foreground mb-4">Upload your 6-month passbook (PDF, JPEG, PNG)</p>
                            <Button 
                              type="button" 
                              variant="outline" 
                              onClick={() => document.getElementById('passbook')?.click()}
                            >
                              Select File
                            </Button>
                            {file && (
                              <div className="mt-4 px-4 py-2 bg-muted rounded-md flex items-center">
                                <FileText className="h-4 w-4 mr-2" />
                                <span className="text-sm truncate max-w-[200px]">{file.name}</span>
                              </div>
                            )}
                            {fileError && (
                              <p className="mt-2 text-sm text-destructive">{fileError}</p>
                            )}
                          </div>
                        </div>
                        <p className="mt-2 text-xs text-muted-foreground">
                          Max file size: 5MB. Accepted formats: PDF, JPEG, PNG
                        </p>
                      </div>
                      
                      <FormField
                        control={form.control}
                        name="additionalComments"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="flex items-center gap-2">
                              <MessageSquare className="h-4 w-4" />
                              Additional Comments
                            </FormLabel>
                            <FormControl>
                              <Textarea 
                                placeholder="Any additional information that might help us create a better financial plan for you" 
                                className="min-h-[100px]" 
                                {...field} 
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </TabsContent>
                </div>
              </Tabs>
              
              <div className="flex justify-end pt-4">
                <Button type="submit" size="lg" className="button-gradient">
                  Generate Financial Plan
                </Button>
              </div>
            </form>
          </Form>
        </div>
      </div>
    </MainLayout>
  );
};

export default AIFinancialPlanner;



====================================================================
📁 FILE: src/pages/AIFinancialPlannerWizard.tsx
====================================================================

import MainLayout from "../layouts/MainLayout";
import { WizardProgress } from "@/components/financial-planner/WizardProgress";
import { WizardContent } from "@/components/financial-planner/WizardContent";
import { FinancialPlannerProvider } from "@/context/FinancialPlannerContext";

const AIFinancialPlannerWizard = () => {
  return (
    <MainLayout>
      <FinancialPlannerProvider>
        <div className="container max-w-4xl px-4 pt-24 pb-16 mx-auto">
          <div className="mb-8 text-center">
            <h1 className="text-3xl font-bold tracking-tight md:text-4xl mb-2">AI Financial Planner</h1>
            <p className="text-muted-foreground max-w-3xl mx-auto">
              Complete this step-by-step form to receive a personalized financial plan tailored to your goals and situation.
            </p>
          </div>
          
          <WizardProgress />
          <WizardContent />
        </div>
      </FinancialPlannerProvider>
    </MainLayout>
  );
};

export default AIFinancialPlannerWizard;



====================================================================
📁 FILE: src/components/financial-planner/DocumentsStep.tsx
====================================================================

import { FileText, Upload } from "lucide-react";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { useFinancialPlanner } from "@/context/FinancialPlannerContext";
import { StepComponentProps } from "@/types/financialPlanner";
import { StepHeader } from "./StepHeader";

export const DocumentsStep = ({ 
  formData, 
  handleInputChange 
}: StepComponentProps) => {
  const { file, fileError, handleFileChange } = useFinancialPlanner();
  
  return (
    <div className="space-y-6">
      <StepHeader 
        icon={<FileText className="h-5 w-5 text-primary" />}
        title="Documents & Additional Information"
      />
      
      <div className="space-y-4">
        <div>
          <Label htmlFor="passbook" className="flex items-center gap-2 mb-2">
            <Upload className="h-4 w-4" />
            Passbook Upload
          </Label>
          <div className="border-2 border-dashed rounded-md px-6 py-8 text-center">
            <Input 
              id="passbook" 
              type="file" 
              className="hidden" 
              onChange={handleFileChange}
              accept=".pdf,.jpg,.jpeg,.png"
            />
            <div className="flex flex-col items-center">
              <Upload className="h-10 w-10 text-muted-foreground mb-2" />
              <p className="mb-1 font-medium">Drag and drop or click to upload</p>
              <p className="text-sm text-muted-foreground mb-4">Upload your 6-month passbook (PDF, JPEG, PNG)</p>
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => document.getElementById('passbook')?.click()}
              >
                Select File
              </Button>
              {file && (
                <div className="mt-4 px-4 py-2 bg-muted rounded-md flex items-center">
                  <FileText className="h-4 w-4 mr-2" />
                  <span className="text-sm truncate max-w-[200px]">{file.name}</span>
                </div>
              )}
              {fileError && (
                <p className="mt-2 text-sm text-destructive">{fileError}</p>
              )}
            </div>
          </div>
          <p className="mt-2 text-xs text-muted-foreground">
            Max file size: 5MB. Accepted formats: PDF, JPEG, PNG
          </p>
        </div>
        
        <div>
          <Label htmlFor="additionalComments">Additional Comments</Label>
          <Textarea 
            id="additionalComments"
            name="additionalComments"
            value={formData.additionalComments}
            onChange={handleInputChange}
            placeholder="Any additional information that might help us create a better financial plan for you"
            className="min-h-[120px]"
          />
        </div>
      </div>
    </div>
  );
};



====================================================================
📁 FILE: src/components/financial-planner/PersonalDetailsStep.tsx
====================================================================

import { Home } from "lucide-react";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Slider } from "@/components/ui/slider";
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from "@/components/ui/select";
import { StepComponentProps } from "@/types/financialPlanner";
import { StepHeader } from "./StepHeader";

export const PersonalDetailsStep = ({ 
  formData, 
  handleInputChange, 
  handleSelectChange, 
  handleSliderChange 
}: StepComponentProps) => {
  return (
    <div className="space-y-6">
      <StepHeader 
        icon={<Home className="h-5 w-5 text-primary" />}
        title="Personal Details"
      />
      
      <div className="space-y-4">
        <div>
          <Label htmlFor="fullName">Full Name</Label>
          <Input 
            id="fullName"
            name="fullName"
            value={formData.fullName}
            onChange={handleInputChange}
            placeholder="Enter your full name"
          />
        </div>
        
        <div>
          <Label htmlFor="age" className="mb-2 block">
            Age: {formData.age}
          </Label>
          <Slider 
            id="age"
            min={18}
            max={100}
            step={1}
            defaultValue={[formData.age]}
            onValueChange={(value) => handleSliderChange('age', value)}
            showValue
            formatValue={(value) => `${value} years`}
          />
        </div>
        
        <div>
          <Label htmlFor="maritalStatus">Marital Status</Label>
          <Select 
            onValueChange={(value) => handleSelectChange('maritalStatus', value)}
            value={formData.maritalStatus}
          >
            <SelectTrigger id="maritalStatus" className="mt-1">
              <SelectValue placeholder="Select marital status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="Single">Single</SelectItem>
              <SelectItem value="Married">Married</SelectItem>
              <SelectItem value="Other">Other</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>
    </div>
  );
};



====================================================================
📁 FILE: src/components/financial-planner/WizardContent.tsx
====================================================================

import { Card, CardContent } from "@/components/ui/card";
import { PersonalDetailsStep } from "./PersonalDetailsStep";
import { IncomeDetailsStep } from "./IncomeDetailsStep";
import { ExpenseDetailsStep } from "./ExpenseDetailsStep";
import { InvestmentsStep } from "./InvestmentsStep";
import { FinancialGoalsStep } from "./FinancialGoalsStep";
import { DocumentsStep } from "./DocumentsStep";
import { PlannerResults } from "./PlannerResults";
import { WizardNavigation } from "./WizardNavigation";
import { useFinancialPlanner } from "@/context/FinancialPlannerContext";

export const WizardContent = () => {
  const { 
    currentStep, 
    formData, 
    showResults,
    handleInputChange, 
    handleSelectChange, 
    handleSliderChange, 
    handleDateChange,
    formatCurrency,
    getRiskLevel
  } = useFinancialPlanner();
  
  const stepProps = {
    formData,
    handleInputChange,
    handleSelectChange,
    handleSliderChange,
    handleDateChange,
    formatCurrency,
    getRiskLevel
  };
  
  if (showResults) {
    return (
      <Card className="shadow-sm">
        <CardContent className="p-6">
          <PlannerResults />
        </CardContent>
      </Card>
    );
  }
  
  return (
    <Card className="shadow-sm">
      <CardContent className="p-6">
        {currentStep === 0 && <PersonalDetailsStep {...stepProps} />}
        {currentStep === 1 && <IncomeDetailsStep {...stepProps} />}
        {currentStep === 2 && <ExpenseDetailsStep {...stepProps} />}
        {currentStep === 3 && <InvestmentsStep {...stepProps} />}
        {currentStep === 4 && <FinancialGoalsStep {...stepProps} />}
        {currentStep === 5 && <DocumentsStep {...stepProps} />}
        
        <WizardNavigation />
      </CardContent>
    </Card>
  );
};



====================================================================
📁 FILE: src/components/financial-planner/ExpenseDetailsStep.tsx
====================================================================

import { BarChart } from "lucide-react";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from "@/components/ui/select";
import { StepComponentProps } from "@/types/financialPlanner";
import { StepHeader } from "./StepHeader";

export const ExpenseDetailsStep = ({ 
  formData, 
  handleInputChange, 
  handleSelectChange 
}: StepComponentProps) => {
  return (
    <div className="space-y-6">
      <StepHeader 
        icon={<BarChart className="h-5 w-5 text-primary" />}
        title="Expense Details"
      />
      
      <div className="space-y-4">
        <h3 className="text-base font-medium">Monthly Fixed Expenses</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <Label htmlFor="rent">Rent/Mortgage</Label>
            <div className="relative">
              <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">$</span>
              <Input 
                id="rent"
                name="rent"
                className="pl-8"
                value={formData.rent}
                onChange={handleInputChange}
                placeholder="0"
              />
            </div>
          </div>
          
          <div>
            <Label htmlFor="utilities">Utilities</Label>
            <div className="relative">
              <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">$</span>
              <Input 
                id="utilities"
                name="utilities"
                className="pl-8"
                value={formData.utilities}
                onChange={handleInputChange}
                placeholder="0"
              />
            </div>
          </div>
          
          <div>
            <Label htmlFor="loans">Loan Repayments</Label>
            <div className="relative">
              <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">$</span>
              <Input 
                id="loans"
                name="loans"
                className="pl-8"
                value={formData.loans}
                onChange={handleInputChange}
                placeholder="0"
              />
            </div>
          </div>
        </div>
        
        <h3 className="text-base font-medium pt-2">Monthly Variable Expenses</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <Label htmlFor="groceries">Groceries</Label>
            <div className="relative">
              <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">$</span>
              <Input 
                id="groceries"
                name="groceries"
                className="pl-8"
                value={formData.groceries}
                onChange={handleInputChange}
                placeholder="0"
              />
            </div>
          </div>
          
          <div>
            <Label htmlFor="entertainment">Entertainment</Label>
            <div className="relative">
              <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">$</span>
              <Input 
                id="entertainment"
                name="entertainment"
                className="pl-8"
                value={formData.entertainment}
                onChange={handleInputChange}
                placeholder="0"
              />
            </div>
          </div>
        </div>
        
        <div className="pt-2">
          <Label htmlFor="hasDebt">Do you have any debt?</Label>
          <Select 
            onValueChange={(value) => handleSelectChange('hasDebt', value)}
            value={formData.hasDebt ? 'true' : 'false'}
          >
            <SelectTrigger id="hasDebt" className="mt-1">
              <SelectValue placeholder="Select option" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="true">Yes</SelectItem>
              <SelectItem value="false">No</SelectItem>
            </SelectContent>
          </Select>
        </div>
        
        {formData.hasDebt && (
          <div>
            <Label htmlFor="debtDetails">Debt Details</Label>
            <Textarea 
              id="debtDetails"
              name="debtDetails"
              value={formData.debtDetails}
              onChange={handleInputChange}
              placeholder="List your debts (credit cards, loans) with amounts"
              className="min-h-[100px]"
            />
          </div>
        )}
      </div>
    </div>
  );
};



====================================================================
📁 FILE: src/components/financial-planner/StepHeader.tsx
====================================================================

import { ReactNode } from "react";

interface StepHeaderProps {
  icon: ReactNode;
  title: string;
}

export const StepHeader = ({ icon, title }: StepHeaderProps) => {
  return (
    <div className="flex items-center gap-2 mb-4">
      {icon}
      <h2 className="text-xl font-semibold">{title}</h2>
    </div>
  );
};



====================================================================
📁 FILE: src/components/financial-planner/FinancialGoalsStep.tsx
====================================================================

import { Target } from "lucide-react";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { StepComponentProps } from "@/types/financialPlanner";
import { StepHeader } from "./StepHeader";

export const FinancialGoalsStep = ({ 
  formData, 
  handleInputChange
}: StepComponentProps) => {
  return (
    <div className="space-y-6">
      <StepHeader 
        icon={<Target className="h-5 w-5 text-primary" />}
        title="Financial Goals"
      />
      
      <div className="space-y-4">
        <div>
          <Label htmlFor="shortTermGoals">Short-term Goals (&lt; 1 year)</Label>
          <Textarea 
            id="shortTermGoals"
            name="shortTermGoals"
            value={formData.shortTermGoals}
            onChange={handleInputChange}
            placeholder="Describe your immediate financial goals"
            className="min-h-[80px]"
          />
        </div>
        
        <div>
          <Label htmlFor="mediumTermGoals">Medium-term Goals (1-5 years)</Label>
          <Textarea 
            id="mediumTermGoals"
            name="mediumTermGoals"
            value={formData.mediumTermGoals}
            onChange={handleInputChange}
            placeholder="Describe your medium-term financial goals"
            className="min-h-[80px]"
          />
        </div>
        
        <div>
          <Label htmlFor="longTermGoals">Long-term Goals (5+ years)</Label>
          <Textarea 
            id="longTermGoals"
            name="longTermGoals"
            value={formData.longTermGoals}
            onChange={handleInputChange}
            placeholder="Describe your long-term financial goals"
            className="min-h-[80px]"
          />
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 pt-2">
          <div>
            <Label htmlFor="targetAmount">Target Amount</Label>
            <div className="relative">
              <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">$</span>
              <Input 
                id="targetAmount"
                name="targetAmount"
                className="pl-8"
                value={formData.targetAmount}
                onChange={handleInputChange}
                placeholder="0"
              />
            </div>
          </div>
          
          <div>
            <Label htmlFor="targetDate">Target Year</Label>
            <Input 
              id="targetDate"
              name="targetDate"
              type="number"
              min={new Date().getFullYear()}
              max={new Date().getFullYear() + 50}
              placeholder={new Date().getFullYear().toString()}
              value={formData.targetDate instanceof Date ? formData.targetDate.getFullYear() : ''}
              onChange={handleInputChange}
            />
          </div>
        </div>
      </div>
    </div>
  );
};



====================================================================
📁 FILE: src/components/financial-planner/WizardProgress.tsx
====================================================================

import { ChevronRight } from "lucide-react";
import { cn } from "@/lib/utils";
import { useFinancialPlanner } from "@/context/FinancialPlannerContext";
import { WIZARD_STEPS } from "@/constants/financialPlannerSteps";

export const WizardProgress = () => {
  const { currentStep } = useFinancialPlanner();
  
  return (
    <div className="mb-8">
      <div className="hidden sm:flex items-center justify-between">
        {WIZARD_STEPS.map((step, index) => (
          <div key={step.id} className="flex flex-col items-center">
            <div 
              className={cn(
                "w-10 h-10 rounded-full flex items-center justify-center border-2 z-10",
                currentStep === index 
                  ? "border-primary bg-primary text-primary-foreground" 
                  : index < currentStep 
                    ? "border-primary bg-primary/20 text-primary" 
                    : "border-muted bg-muted text-muted-foreground"
              )}
            >
              {index < currentStep ? (
                <ChevronRight className="h-5 w-5" />
              ) : (
                <span>{index + 1}</span>
              )}
            </div>
            <span className={cn(
              "text-xs mt-2 font-medium",
              currentStep === index ? "text-primary" : "text-muted-foreground"
            )}>
              {step.title}
            </span>
          </div>
        ))}
      </div>
      
      <div className="sm:hidden flex items-center justify-between mb-4">
        <div className="flex items-center">
          {WIZARD_STEPS[currentStep].icon}
          <div className="ml-2">
            <h3 className="font-medium">{WIZARD_STEPS[currentStep].title}</h3>
            <p className="text-xs text-muted-foreground">{WIZARD_STEPS[currentStep].description}</p>
          </div>
        </div>
        <div className="text-sm font-medium">
          Step {currentStep + 1} of {WIZARD_STEPS.length}
        </div>
      </div>
      
      <div className="w-full bg-muted h-2 rounded-full mt-2">
        <div 
          className="bg-primary h-2 rounded-full transition-all duration-300"
          style={{ width: `${(currentStep / (WIZARD_STEPS.length - 1)) * 100}%` }}
        ></div>
      </div>
    </div>
  );
};



====================================================================
📁 FILE: src/components/financial-planner/WizardNavigation.tsx
====================================================================

import { ChevronLeft, ChevronRight } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useFinancialPlanner } from "@/context/FinancialPlannerContext";
import { WIZARD_STEPS } from "@/constants/financialPlannerSteps";

export const WizardNavigation = () => {
  const { currentStep, nextStep, prevStep, handleSubmit } = useFinancialPlanner();
  
  return (
    <div className="flex justify-between pt-8">
      <Button
        type="button"
        variant="outline"
        onClick={prevStep}
        disabled={currentStep === 0}
        className="flex items-center gap-2"
      >
        <ChevronLeft className="h-4 w-4" />
        Back
      </Button>
      
      {currentStep < WIZARD_STEPS.length - 1 ? (
        <Button
          type="button"
          onClick={nextStep}
          className="flex items-center gap-2"
        >
          Next
          <ChevronRight className="h-4 w-4" />
        </Button>
      ) : (
        <Button
          type="button"
          onClick={handleSubmit}
          className="bg-gradient-to-r from-primary to-blue-600 text-white"
        >
          Generate Financial Plan
        </Button>
      )}
    </div>
  );
};



====================================================================
📁 FILE: src/components/financial-planner/InvestmentsStep.tsx
====================================================================

import { PiggyBank } from "lucide-react";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Slider } from "@/components/ui/slider";
import { StepComponentProps } from "@/types/financialPlanner";
import { StepHeader } from "./StepHeader";

export const InvestmentsStep = ({ 
  formData, 
  handleInputChange, 
  handleSliderChange,
  getRiskLevel
}: StepComponentProps) => {
  return (
    <div className="space-y-6">
      <StepHeader 
        icon={<PiggyBank className="h-5 w-5 text-primary" />}
        title="Investment & Savings"
      />
      
      <div className="space-y-4">
        <div>
          <Label htmlFor="currentSavings">Current Savings</Label>
          <div className="relative">
            <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">$</span>
            <Input 
              id="currentSavings"
              name="currentSavings"
              className="pl-8"
              value={formData.currentSavings}
              onChange={handleInputChange}
              placeholder="0"
            />
          </div>
        </div>
        
        <div>
          <Label htmlFor="currentInvestments">Current Investments</Label>
          <Textarea 
            id="currentInvestments"
            name="currentInvestments"
            value={formData.currentInvestments}
            onChange={handleInputChange}
            placeholder="List your current investments (stocks, mutual funds, real estate)"
            className="min-h-[100px]"
          />
        </div>
        
        <div>
          <Label htmlFor="investmentAmount">Investment Amount</Label>
          <div className="relative">
            <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">$</span>
            <Input 
              id="investmentAmount"
              name="investmentAmount"
              className="pl-8"
              value={formData.investmentAmount}
              onChange={handleInputChange}
              placeholder="0"
            />
          </div>
        </div>
        
        <div>
          <Label htmlFor="riskTolerance" className="mb-2 block">
            Risk Tolerance: {formData.riskTolerance} - {getRiskLevel(formData.riskTolerance)}
          </Label>
          <Slider 
            id="riskTolerance"
            min={1}
            max={10}
            step={1}
            defaultValue={[formData.riskTolerance]}
            onValueChange={(value) => handleSliderChange('riskTolerance', value)}
            showValue
            formatValue={(value) => `${value}/10 (${getRiskLevel(value)})`}
          />
        </div>
      </div>
    </div>
  );
};



====================================================================
📁 FILE: src/components/financial-planner/PlannerResults.tsx
====================================================================

import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Chart } from "@/components/ui/chart";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Download, ArrowLeft, Shield, LineChart, PiggyBank, AlertTriangle, DollarSign, TrendingUp } from "lucide-react";
import { useFinancialPlanner } from "@/context/FinancialPlannerContext";

export const PlannerResults = () => {
  const { formData, resetForm } = useFinancialPlanner();
  const [activeTab, setActiveTab] = useState("summary");
  
  // Simulated expense data (would be extracted from passbook)
  const expenseData = [
    { name: "Housing", value: 1500 },
    { name: "Food", value: 600 },
    { name: "Transportation", value: 350 },
    { name: "Utilities", value: 250 },
    { name: "Entertainment", value: 200 },
    { name: "Other", value: 300 }
  ];
  
  // Simulated investment distribution
  const investmentData = [
    { name: "Stocks", value: 40 },
    { name: "Mutual Funds", value: 25 },
    { name: "Fixed Deposits", value: 15 },
    { name: "Gold", value: 10 },
    { name: "Real Estate", value: 10 }
  ];
  
  // Simulated stock recommendations
  const stockRecommendations = [
    { name: "Company A", sector: "Technology", targetPrice: "$120", horizon: "Long Term" },
    { name: "Company B", sector: "Healthcare", targetPrice: "$85", horizon: "Medium Term" },
    { name: "Company C", sector: "Finance", targetPrice: "$65", horizon: "Long Term" },
    { name: "Company D", sector: "Energy", targetPrice: "$45", horizon: "Short Term" }
  ];
  
  // Simulated SIP recommendations
  const sipRecommendations = [
    { name: "Blue Chip Fund", amount: "$200", frequency: "Monthly", horizon: "10+ years" },
    { name: "Balanced Advantage", amount: "$150", frequency: "Monthly", horizon: "5-7 years" },
    { name: "Small Cap Fund", amount: "$100", frequency: "Monthly", horizon: "7-10 years" }
  ];
  
  // Simulated insurance recommendations
  const insuranceRecommendations = [
    { type: "Term Life", coverage: "$500,000", premium: "$30/month", provider: "InsureCo A" },
    { type: "Health", coverage: "$100,000", premium: "$120/month", provider: "InsureCo B" },
    { type: "Critical Illness", coverage: "$50,000", premium: "$25/month", provider: "InsureCo C" }
  ];
  
  const handleDownload = () => {
    // In a real app, this would generate a PDF report
    alert("Downloading your financial plan...");
  };
  
  const handleStartOver = () => {
    resetForm();
  };
  
  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">Your Financial Plan</h2>
          <p className="text-muted-foreground">
            Based on your inputs, we've created a personalized financial plan to help you achieve your goals.
          </p>
        </div>
        
        <div className="flex gap-2">
          <Button variant="outline" size="sm" onClick={handleStartOver}>
            <ArrowLeft className="h-4 w-4 mr-1" />
            Start Over
          </Button>
          <Button size="sm" onClick={handleDownload}>
            <Download className="h-4 w-4 mr-1" />
            Download Plan
          </Button>
        </div>
      </div>
      
      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid grid-cols-5 mb-6">
          <TabsTrigger value="summary">Summary</TabsTrigger>
          <TabsTrigger value="investments">Investments</TabsTrigger>
          <TabsTrigger value="expenses">Expenses</TabsTrigger>
          <TabsTrigger value="insurance">Insurance</TabsTrigger>
          <TabsTrigger value="recommendations">Recommendations</TabsTrigger>
        </TabsList>
        
        <TabsContent value="summary" className="space-y-6">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-lg flex items-center gap-2">
                <TrendingUp className="h-5 w-5 text-primary" />
                Financial Health Score
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-center">
                <div className="w-16 h-16 rounded-full bg-gradient-to-r from-primary to-blue-600 flex items-center justify-center text-white text-2xl font-bold">
                  {formData.riskTolerance > 7 ? "A-" : formData.riskTolerance > 4 ? "B+" : "C"}
                </div>
                <div className="ml-4">
                  <h3 className="font-medium">
                    {formData.riskTolerance > 7 
                      ? "Excellent Financial Health" 
                      : formData.riskTolerance > 4 
                        ? "Good Financial Health" 
                        : "Needs Improvement"}
                  </h3>
                  <p className="text-sm text-muted-foreground">
                    Based on your income, expenses, and financial goals
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium flex items-center gap-2">
                  <PiggyBank className="h-4 w-4 text-primary" />
                  Monthly Savings Potential
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-2xl font-bold">${Math.round(formData.primaryIncome * 0.2)}</p>
                <p className="text-xs text-muted-foreground">
                  {Math.round(formData.primaryIncome * 0.2 / formData.primaryIncome * 100)}% of your income
                </p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium flex items-center gap-2">
                  <AlertTriangle className="h-4 w-4 text-amber-500" />
                  Emergency Fund Target
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-2xl font-bold">${Math.round(formData.primaryIncome * 6)}</p>
                <p className="text-xs text-muted-foreground">
                  6 months of expenses
                </p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium flex items-center gap-2">
                  <DollarSign className="h-4 w-4 text-green-500" />
                  Net Worth Projection
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-2xl font-bold">${Math.round(formData.primaryIncome * 12 * 10 * 0.6)}</p>
                <p className="text-xs text-muted-foreground">
                  Projected 10-year growth
                </p>
              </CardContent>
            </Card>
          </div>
          
          <Card>
            <CardHeader>
              <CardTitle>Your Financial Summary</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h3 className="font-medium mb-2">Key Strengths</h3>
                <ul className="list-disc pl-5 space-y-1">
                  <li>Consistent income stream with growth potential</li>
                  <li>Clear financial goals established for short and long term</li>
                  <li>Age advantage for compound growth of investments</li>
                </ul>
              </div>
              
              <div>
                <h3 className="font-medium mb-2">Areas for Improvement</h3>
                <ul className="list-disc pl-5 space-y-1">
                  <li>Insufficient emergency fund reserves</li>
                  <li>High expense ratio relative to income</li>
                  <li>Need for more diversified investment portfolio</li>
                </ul>
              </div>
              
              <div>
                <h3 className="font-medium mb-2">Next Steps</h3>
                <ul className="list-disc pl-5 space-y-1">
                  <li>Build emergency fund to cover 6 months of expenses</li>
                  <li>Optimize budget to reduce discretionary spending by 15%</li>
                  <li>Implement recommended SIP investments for long-term growth</li>
                  <li>Secure adequate insurance coverage for risk management</li>
                </ul>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="investments" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card className="md:col-span-2">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <LineChart className="h-5 w-5 text-primary" />
                  Recommended Investment Distribution
                </CardTitle>
              </CardHeader>
              <CardContent className="h-80">
                <Chart type="pie" data={investmentData} />
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>Stock Recommendations</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="rounded-md border">
                  <table className="min-w-full divide-y divide-border">
                    <thead>
                      <tr className="bg-muted/50">
                        <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Company</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Sector</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Target</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Horizon</th>
                      </tr>
                    </thead>
                    <tbody className="bg-card divide-y divide-border">
                      {stockRecommendations.map((stock, index) => (
                        <tr key={index}>
                          <td className="px-4 py-3 text-sm font-medium">{stock.name}</td>
                          <td className="px-4 py-3 text-sm text-muted-foreground">{stock.sector}</td>
                          <td className="px-4 py-3 text-sm">{stock.targetPrice}</td>
                          <td className="px-4 py-3 text-sm text-muted-foreground">{stock.horizon}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>SIP Recommendations</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="rounded-md border">
                  <table className="min-w-full divide-y divide-border">
                    <thead>
                      <tr className="bg-muted/50">
                        <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Fund Name</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Amount</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Frequency</th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Horizon</th>
                      </tr>
                    </thead>
                    <tbody className="bg-card divide-y divide-border">
                      {sipRecommendations.map((sip, index) => (
                        <tr key={index}>
                          <td className="px-4 py-3 text-sm font-medium">{sip.name}</td>
                          <td className="px-4 py-3 text-sm">{sip.amount}</td>
                          <td className="px-4 py-3 text-sm text-muted-foreground">{sip.frequency}</td>
                          <td className="px-4 py-3 text-sm text-muted-foreground">{sip.horizon}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        <TabsContent value="expenses" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <DollarSign className="h-5 w-5 text-primary" />
                Expense Breakdown
              </CardTitle>
            </CardHeader>
            <CardContent className="h-80">
              <Chart type="pie" data={expenseData} />
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>Expense Analysis</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h3 className="font-medium mb-2">Key Observations</h3>
                <ul className="list-disc pl-5 space-y-1">
                  <li>Housing expenses represent {Math.round(1500 / (1500 + 600 + 350 + 250 + 200 + 300) * 100)}% of your total budget</li>
                  <li>Your food expenses are slightly above average for your income bracket</li>
                  <li>Entertainment spending is within reasonable limits</li>
                </ul>
              </div>
              
              <div>
                <h3 className="font-medium mb-2">Recommended Actions</h3>
                <ul className="list-disc pl-5 space-y-1">
                  <li>Consider refinancing housing costs to reduce monthly payments</li>
                  <li>Implement meal planning to reduce food expenses by 15%</li>
                  <li>Evaluate transportation alternatives to reduce costs</li>
                  <li>Review subscription services for potential consolidation</li>
                </ul>
              </div>
              
              <div>
                <h3 className="font-medium mb-2">Savings Potential</h3>
                <p className="text-sm">By implementing these recommendations, you could save approximately <span className="font-semibold">${Math.round((1500 + 600 + 350 + 250 + 200 + 300) * 0.15)}</span> per month, which translates to <span className="font-semibold">${Math.round((1500 + 600 + 350 + 250 + 200 + 300) * 0.15 * 12)}</span> annually.</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="insurance" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Shield className="h-5 w-5 text-primary" />
                Insurance Recommendations
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="rounded-md border">
                <table className="min-w-full divide-y divide-border">
                  <thead>
                    <tr className="bg-muted/50">
                      <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Insurance Type</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Coverage</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Premium</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider">Provider</th>
                    </tr>
                  </thead>
                  <tbody className="bg-card divide-y divide-border">
                    {insuranceRecommendations.map((insurance, index) => (
                      <tr key={index}>
                        <td className="px-4 py-3 text-sm font-medium">{insurance.type}</td>
                        <td className="px-4 py-3 text-sm">{insurance.coverage}</td>
                        <td className="px-4 py-3 text-sm text-muted-foreground">{insurance.premium}</td>
                        <td className="px-4 py-3 text-sm text-muted-foreground">{insurance.provider}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>Insurance Gap Analysis</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h3 className="font-medium mb-2">Current Coverage</h3>
                <p className="text-sm mb-2">Based on your inputs, you currently have:</p>
                <ul className="list-disc pl-5 space-y-1 text-sm">
                  <li>No term life insurance</li>
                  <li>Basic health insurance through employer</li>
                  <li>No disability insurance</li>
                </ul>
              </div>
              
              <div>
                <h3 className="font-medium mb-2">Coverage Gaps</h3>
                <ul className="list-disc pl-5 space-y-1 text-sm">
                  <li>Insufficient life insurance for your financial responsibilities</li>
                  <li>Limited health coverage with high deductibles</li>
                  <li>No income protection in case of disability</li>
                  <li>No critical illness coverage</li>
                </ul>
              </div>
              
              <div>
                <h3 className="font-medium mb-2">Recommended Insurance Strategy</h3>
                <p className="text-sm mb-2">We recommend a comprehensive insurance strategy that includes:</p>
                <ol className="list-decimal pl-5 space-y-1 text-sm">
                  <li>Secure term life insurance with coverage of {formData.primaryIncome * 10} (10x annual income)</li>
                  <li>Enhance health coverage with a supplemental policy</li>
                  <li>Add disability insurance to protect your income</li>
                  <li>Consider critical illness coverage for additional protection</li>
                </ol>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="recommendations" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Personalized Recommendations</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div>
                <h3 className="text-lg font-medium mb-2">Short-Term Actions (0-6 months)</h3>
                <div className="space-y-4">
                  <div className="p-4 rounded-lg border bg-muted/30">
                    <h4 className="font-medium mb-1">Build Emergency Fund</h4>
                    <p className="text-sm">Allocate ${Math.round(formData.primaryIncome * 0.15)} monthly to build an emergency fund of ${formData.primaryIncome * 6} within 12 months.</p>
                  </div>
                  
                  <div className="p-4 rounded-lg border bg-muted/30">
                    <h4 className="font-medium mb-1">Secure Essential Insurance</h4>
                    <p className="text-sm">Prioritize term life insurance and enhanced health coverage as outlined in the insurance recommendations.</p>
                  </div>
                  
                  <div className="p-4 rounded-lg border bg-muted/30">
                    <h4 className="font-medium mb-1">Optimize Expenses</h4>
                    <p className="text-sm">Implement budget optimization strategies to reduce monthly expenses by 15%, focusing on housing, food, and discretionary spending.</p>
                  </div>
                </div>
              </div>
              
              <div>
                <h3 className="text-lg font-medium mb-2">Medium-Term Actions (6-24 months)</h3>
                <div className="space-y-4">
                  <div className="p-4 rounded-lg border bg-muted/30">
                    <h4 className="font-medium mb-1">Implement Investment Strategy</h4>
                    <p className="text-sm">Begin SIP investments according to recommendations, starting with ${Math.round(formData.primaryIncome * 0.1)} monthly into diversified mutual funds.</p>
                  </div>
                  
                  <div className="p-4 rounded-lg border bg-muted/30">
                    <h4 className="font-medium mb-1">Debt Reduction Plan</h4>
                    <p className="text-sm">Allocate additional ${Math.round(formData.primaryIncome * 0.08)} monthly toward high-interest debt reduction.</p>
                  </div>
                  
                  <div className="p-4 rounded-lg border bg-muted/30">
                    <h4 className="font-medium mb-1">Tax Optimization</h4>
                    <p className="text-sm">Explore tax-advantaged investment options to optimize your tax liability.</p>
                  </div>
                </div>
              </div>
              
              <div>
                <h3 className="text-lg font-medium mb-2">Long-Term Strategies (2-5 years)</h3>
                <div className="space-y-4">
                  <div className="p-4 rounded-lg border bg-muted/30">
                    <h4 className="font-medium mb-1">Asset Allocation Adjustment</h4>
                    <p className="text-sm">Gradually increase equity exposure in your portfolio to {60 + formData.riskTolerance}% based on your risk tolerance.</p>
                  </div>
                  
                  <div className="p-4 rounded-lg border bg-muted/30">
                    <h4 className="font-medium mb-1">Real Estate Investment</h4>
                    <p className="text-sm">Consider real estate investment by year 3, with a down payment of ${Math.round(formData.primaryIncome * 12 * 0.2)} saved through dedicated SIP.</p>
                  </div>
                  
                  <div className="p-4 rounded-lg border bg-muted/30">
                    <h4 className="font-medium mb-1">Retirement Planning</h4>
                    <p className="text-sm">Increase retirement contributions to 15% of income, targeting a retirement corpus of ${Math.round(formData.primaryIncome * 12 * 25)} by age 60.</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};



====================================================================
📁 FILE: src/components/financial-planner/IncomeDetailsStep.tsx
====================================================================

import { DollarSign } from "lucide-react";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Slider } from "@/components/ui/slider";
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from "@/components/ui/select";
import { StepComponentProps } from "@/types/financialPlanner";
import { StepHeader } from "./StepHeader";

export const IncomeDetailsStep = ({ 
  formData, 
  handleInputChange, 
  handleSelectChange, 
  handleSliderChange,
  formatCurrency
}: StepComponentProps) => {
  return (
    <div className="space-y-6">
      <StepHeader 
        icon={<DollarSign className="h-5 w-5 text-primary" />}
        title="Income Details"
      />
      
      <div className="space-y-4">
        <div>
          <Label htmlFor="primaryIncome" className="mb-2 block">
            Primary Income (Monthly): {formatCurrency(formData.primaryIncome)}
          </Label>
          <Slider 
            id="primaryIncome"
            min={500}
            max={10000}
            step={100}
            defaultValue={[formData.primaryIncome]}
            onValueChange={(value) => handleSliderChange('primaryIncome', value)}
            showValue
            formatValue={formatCurrency}
          />
        </div>
        
        <div>
          <Label htmlFor="additionalIncome">Additional Income (Optional)</Label>
          <div className="relative">
            <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground">$</span>
            <Input 
              id="additionalIncome"
              name="additionalIncome"
              className="pl-8"
              value={formData.additionalIncome}
              onChange={handleInputChange}
              placeholder="0"
            />
          </div>
        </div>
        
        <div>
          <Label htmlFor="salaryFrequency">Salary Frequency</Label>
          <Select 
            onValueChange={(value) => handleSelectChange('salaryFrequency', value)}
            value={formData.salaryFrequency}
          >
            <SelectTrigger id="salaryFrequency" className="mt-1">
              <SelectValue placeholder="Select frequency" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="Monthly">Monthly</SelectItem>
              <SelectItem value="Bi-weekly">Bi-weekly</SelectItem>
              <SelectItem value="Weekly">Weekly</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>
    </div>
  );
};



====================================================================
📁 FILE: src/context/FinancialPlannerContext.tsx
====================================================================

import { createContext, ReactNode, useContext, useState } from "react";
import { FormData, WizardContextType } from "../types/financialPlanner";
import { useToast } from "@/hooks/use-toast";

const FinancialPlannerContext = createContext<WizardContextType | undefined>(undefined);

const defaultFormData: FormData = {
  fullName: '',
  age: 30,
  maritalStatus: '',
  
  primaryIncome: 3000,
  additionalIncome: '',
  salaryFrequency: '',
  
  rent: '',
  utilities: '',
  loans: '',
  groceries: '',
  entertainment: '',
  hasDebt: false,
  debtDetails: '',
  
  currentSavings: '',
  currentInvestments: '',
  investmentAmount: '',
  riskTolerance: 5,
  
  shortTermGoals: '',
  mediumTermGoals: '',
  longTermGoals: '',
  targetAmount: '',
  targetDate: '',
  
  additionalComments: ''
};

export const FinancialPlannerProvider = ({ children }: { children: ReactNode }) => {
  const [formData, setFormData] = useState<FormData>(defaultFormData);
  const [currentStep, setCurrentStep] = useState(0);
  const [file, setFile] = useState<File | null>(null);
  const [fileError, setFileError] = useState<string | null>(null);
  const [showResults, setShowResults] = useState(false);
  const { toast } = useToast();

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleSelectChange = (name: string, value: string) => {
    setFormData(prev => ({ ...prev, [name]: value }));
    
    if (name === 'maritalStatus' && value === 'Single') {
      setCurrentStep(1);
    }
    
    if (name === 'hasDebt' && value === 'false') {
      setFormData(prev => ({ ...prev, hasDebt: false }));
    } else if (name === 'hasDebt' && value === 'true') {
      setFormData(prev => ({ ...prev, hasDebt: true }));
    }
  };
  
  const handleSliderChange = (name: string, value: number[]) => {
    setFormData(prev => ({ ...prev, [name]: value[0] }));
  };
  
  const handleDateChange = (date: Date | undefined) => {
    setFormData(prev => ({ ...prev, targetDate: date }));
  };
  
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0];
    setFileError(null);
    
    if (!selectedFile) {
      setFile(null);
      return;
    }
    
    const allowedTypes = ['application/pdf', 'image/jpeg', 'image/png'];
    if (!allowedTypes.includes(selectedFile.type)) {
      setFileError("Please upload a PDF or image file (JPEG, PNG)");
      setFile(null);
      return;
    }
    
    if (selectedFile.size > 5 * 1024 * 1024) {
      setFileError("File size must be less than 5MB");
      setFile(null);
      return;
    }
    
    setFile(selectedFile);
  };
  
  const handleSubmit = () => {
    // Allow form submission even without file upload
    if (!file) {
      // Just show a warning toast but continue
      toast({
        title: "Missing passbook upload",
        description: "We'll generate your plan without passbook data. For a more accurate plan, consider uploading your passbook later.",
        variant: "default"
      });
    }
    
    console.log("Form data:", formData);
    console.log("File:", file);
    
    // Show the results instead of just a toast
    setShowResults(true);
  };
  
  const resetForm = () => {
    setCurrentStep(0);
    setFormData(defaultFormData);
    setFile(null);
    setShowResults(false);
  };
  
  const nextStep = () => {
    if (currentStep < 5) {
      setCurrentStep(currentStep + 1);
    }
  };
  
  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };
  
  const formatCurrency = (value: number) => {
    return `$${value.toLocaleString()}`;
  };
  
  const getRiskLevel = (value: number) => {
    if (value <= 3) return "Low Risk";
    if (value <= 7) return "Medium Risk";
    return "High Risk";
  };

  const value: WizardContextType = {
    formData,
    setFormData,
    file,
    setFile,
    fileError,
    setFileError,
    currentStep,
    setCurrentStep,
    showResults,
    setShowResults,
    handleInputChange,
    handleSelectChange,
    handleSliderChange,
    handleDateChange,
    handleFileChange,
    handleSubmit,
    resetForm,
    nextStep,
    prevStep,
    formatCurrency,
    getRiskLevel
  };

  return (
    <FinancialPlannerContext.Provider value={value}>
      {children}
    </FinancialPlannerContext.Provider>
  );
};

export const useFinancialPlanner = () => {
  const context = useContext(FinancialPlannerContext);
  if (context === undefined) {
    throw new Error('useFinancialPlanner must be used within a FinancialPlannerProvider');
  }
  return context;
};



====================================================================
📁 FILE: src/constants/financialPlannerSteps.tsx
====================================================================

import { 
  BarChart, 
  DollarSign, 
  FileText, 
  Home, 
  PiggyBank, 
  Target 
} from "lucide-react";
import { WizardStep } from "@/types/financialPlanner";

export const WIZARD_STEPS: WizardStep[] = [
  {
    id: 'personal',
    title: 'Personal Details',
    description: 'Tell us about yourself',
    icon: <Home className="h-5 w-5" />
  },
  {
    id: 'income',
    title: 'Income Details',
    description: 'Your monthly earnings',
    icon: <DollarSign className="h-5 w-5" />
  },
  {
    id: 'expenses',
    title: 'Expense Details',
    description: 'Your monthly spending',
    icon: <BarChart className="h-5 w-5" />
  },
  {
    id: 'investments',
    title: 'Investment & Savings',
    description: 'Your financial assets',
    icon: <PiggyBank className="h-5 w-5" />
  },
  {
    id: 'goals',
    title: 'Financial Goals',
    description: 'What you want to achieve',
    icon: <Target className="h-5 w-5" />
  },
  {
    id: 'documents',
    title: 'Documents & Information',
    description: 'Additional details that help us',
    icon: <FileText className="h-5 w-5" />
  }
];



====================================================================
📁 FILE: src/types/financialPlanner.ts
====================================================================

import { Dispatch, SetStateAction } from "react";

export interface FormData {
  fullName: string;
  age: number;
  maritalStatus: string;
  
  primaryIncome: number;
  additionalIncome: string;
  salaryFrequency: string;
  
  rent: string;
  utilities: string;
  loans: string;
  groceries: string;
  entertainment: string;
  hasDebt: boolean;
  debtDetails: string;
  
  currentSavings: string;
  currentInvestments: string;
  investmentAmount: string;
  riskTolerance: number;
  
  shortTermGoals: string;
  mediumTermGoals: string;
  longTermGoals: string;
  targetAmount: string;
  targetDate: string | Date;
  
  additionalComments: string;
}

export interface StepComponentProps {
  formData: FormData;
  handleInputChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
  handleSelectChange: (name: string, value: string) => void;
  handleSliderChange: (name: string, value: number[]) => void;
  handleDateChange: (date: Date | undefined) => void;
  formatCurrency: (value: number) => string;
  getRiskLevel: (value: number) => string;
}

export interface WizardStep {
  id: string;
  title: string;
  description: string;
  icon: JSX.Element;
}

export interface WizardContextType {
  formData: FormData;
  setFormData: Dispatch<SetStateAction<FormData>>;
  file: File | null;
  setFile: Dispatch<SetStateAction<File | null>>;
  fileError: string | null;
  setFileError: Dispatch<SetStateAction<string | null>>;
  currentStep: number;
  setCurrentStep: Dispatch<SetStateAction<number>>;
  showResults: boolean;
  setShowResults: Dispatch<SetStateAction<boolean>>;
  handleInputChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
  handleSelectChange: (name: string, value: string) => void;
  handleSliderChange: (name: string, value: number[]) => void;
  handleDateChange: (date: Date | undefined) => void;
  handleFileChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  handleSubmit: () => void;
  resetForm: () => void;
  nextStep: () => void;
  prevStep: () => void;
  formatCurrency: (value: number) => string;
  getRiskLevel: (value: number) => string;
}



