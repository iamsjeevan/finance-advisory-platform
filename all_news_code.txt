====================================================================
üìÅ FILE: src/pages/News.tsx
====================================================================

import { useState } from 'react';
import MainLayout from '@/layouts/MainLayout';
import NewsDashboard from '@/components/news/NewsDashboard';
import { Button } from '@/components/ui/button';
import { RefreshCw } from 'lucide-react';
import { toast } from 'sonner';
import { NewsProvider } from '@/context/NewsContext';

const News = () => {
  const [refreshing, setRefreshing] = useState(false);

  const handleRefresh = async () => {
    setRefreshing(true);
    toast.info("Refreshing news data...");
    // We'll access the refreshNews function from the local NewsDashboard component
    // which has access to the NewsContext
    setTimeout(() => {
      setRefreshing(false);
    }, 1000);
  };

  return (
    <MainLayout>
      <NewsProvider>
        <div className="container mx-auto px-4 py-8 pt-16">
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-3xl font-bold">Financial News Dashboard</h1>
            <Button 
              variant="outline" 
              size="sm" 
              onClick={handleRefresh}
              disabled={refreshing}
              className="flex items-center gap-2"
            >
              <RefreshCw size={16} className={refreshing ? "animate-spin" : ""} />
              <span>Refresh</span>
            </Button>
          </div>
          <NewsDashboard onRefresh={handleRefresh} />
        </div>
      </NewsProvider>
    </MainLayout>
  );
};

export default News;



====================================================================
üìÅ FILE: src/components/news/WatchlistPanel.tsx
====================================================================

import { useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Separator } from '@/components/ui/separator';
import { Plus, X, ListPlus } from 'lucide-react';
import { useWatchlist } from '@/context/WatchlistContext';
import WatchlistStockItem from './WatchlistStockItem';
import WatchlistForm from './WatchlistForm';

const WatchlistPanel = () => {
  const { 
    watchlists, 
    activeWatchlist, 
    setActiveWatchlist, 
    addWatchlist, 
    removeWatchlist,
    addStockToWatchlist,
    removeStockFromWatchlist
  } = useWatchlist();
  
  const [isCreatingWatchlist, setIsCreatingWatchlist] = useState(false);
  const [newSymbol, setNewSymbol] = useState('');

  const handleAddStock = () => {
    if (newSymbol.trim()) {
      addStockToWatchlist(activeWatchlist, newSymbol.toUpperCase());
      setNewSymbol('');
    }
  };

  const handleSaveWatchlist = (name: string) => {
    addWatchlist(name);
    setIsCreatingWatchlist(false);
  };

  return (
    <div className="sticky top-20">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-semibold">Watchlists</h2>
        <Button 
          variant="outline" 
          size="sm" 
          onClick={() => setIsCreatingWatchlist(true)}
        >
          <ListPlus className="h-4 w-4 mr-2" />
          <span>New</span>
        </Button>
      </div>

      {isCreatingWatchlist && (
        <WatchlistForm 
          onSave={handleSaveWatchlist}
          onCancel={() => setIsCreatingWatchlist(false)}
        />
      )}

      <Card>
        <CardContent className="p-4">
          <Tabs 
            defaultValue={activeWatchlist} 
            onValueChange={setActiveWatchlist} 
            className="w-full"
          >
            <TabsList 
              className="w-full mb-4 grid" 
              style={{ 
                gridTemplateColumns: `repeat(${watchlists.length}, 1fr)` 
              }}
            >
              {watchlists.map(wl => (
                <TabsTrigger key={wl.id} value={wl.id} className="text-xs sm:text-sm">
                  {wl.name}
                </TabsTrigger>
              ))}
            </TabsList>
            
            {watchlists.map(wl => (
              <TabsContent key={wl.id} value={wl.id} className="mt-0">
                <div className="flex justify-between items-center mb-3">
                  <h3 className="font-medium">{wl.name}</h3>
                  {watchlists.length > 1 && (
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      onClick={() => removeWatchlist(wl.id)}
                      className="h-8 w-8 p-0"
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  )}
                </div>
                
                <div className="flex gap-2 mb-3">
                  <Input
                    placeholder="Add symbol (e.g., AAPL)"
                    value={activeWatchlist === wl.id ? newSymbol : ''}
                    onChange={(e) => setNewSymbol(e.target.value.toUpperCase())}
                    className="w-full"
                  />
                  <Button 
                    size="sm" 
                    onClick={handleAddStock} 
                    disabled={activeWatchlist !== wl.id || !newSymbol.trim()}
                    className="shrink-0"
                  >
                    <Plus className="h-4 w-4" />
                  </Button>
                </div>
                
                <Separator className="my-3" />
                
                <div className="space-y-2 max-h-[400px] overflow-y-auto">
                  {wl.stocks.length === 0 ? (
                    <p className="text-center text-sm text-muted-foreground py-4">
                      No stocks added yet. Add some symbols above.
                    </p>
                  ) : (
                    wl.stocks.map(symbol => (
                      <WatchlistStockItem
                        key={symbol}
                        symbol={symbol}
                        watchlistId={wl.id}
                        onRemove={removeStockFromWatchlist}
                      />
                    ))
                  )}
                </div>
              </TabsContent>
            ))}
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
};

export default WatchlistPanel;



====================================================================
üìÅ FILE: src/components/news/NewsDashboard.tsx
====================================================================

import NewsSearchBar from './NewsSearchBar';
import NewsTabs from './NewsTabs';
import WatchlistPanel from './WatchlistPanel';
import { useNews } from '@/context/NewsContext';
import { useEffect } from 'react';

interface NewsDashboardProps {
  onRefresh?: () => void;
}

const NewsDashboard = ({ onRefresh }: NewsDashboardProps) => {
  const { refreshNews } = useNews();
  
  // Connect the parent's refresh function to the context's refresh
  useEffect(() => {
    if (onRefresh) {
      const handleRefresh = async () => {
        await refreshNews();
      };
      
      // Store the original onRefresh function
      const originalOnRefresh = onRefresh;
      
      // Redefine onRefresh to also call refreshNews
      (window as any).handleNewsRefresh = handleRefresh;
    }
    
    return () => {
      // Clean up
      delete (window as any).handleNewsRefresh;
    };
  }, [onRefresh, refreshNews]);
  
  return (
    <div className="flex flex-col lg:flex-row gap-6">
      <div className="flex-1">
        <NewsSearchBar />
        <NewsTabs />
      </div>
      
      <div className="w-full lg:w-80 xl:w-96 lg:border-l lg:border-border lg:pl-6">
        <WatchlistPanel />
      </div>
    </div>
  );
};

export default NewsDashboard;



====================================================================
üìÅ FILE: src/components/news/NewsTabs.tsx
====================================================================

import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import GlobalNewsSection from './GlobalNewsSection';
import FinancialNewsSection from './FinancialNewsSection';
import TrendingStocksSection from './TrendingStocksSection';
import SectorOverviewSection from './SectorOverviewSection';
import { useNews } from '@/context/NewsContext';

const NewsTabs = () => {
  const { news, isLoading, activeFilter, setActiveFilter } = useNews();

  return (
    <Tabs defaultValue={activeFilter} onValueChange={setActiveFilter} className="w-full">
      <TabsList className="grid grid-cols-4 mb-6">
        <TabsTrigger value="global">Global</TabsTrigger>
        <TabsTrigger value="financial">Financial</TabsTrigger>
        <TabsTrigger value="trending">Trending</TabsTrigger>
        <TabsTrigger value="sectors">Sectors</TabsTrigger>
      </TabsList>
      
      <TabsContent value="global" className="mt-0">
        <GlobalNewsSection news={news?.global || []} isLoading={isLoading} />
      </TabsContent>
      
      <TabsContent value="financial" className="mt-0">
        <FinancialNewsSection news={news?.financial || []} isLoading={isLoading} />
      </TabsContent>
      
      <TabsContent value="trending" className="mt-0">
        <TrendingStocksSection stocks={news?.trendingStocks || []} isLoading={isLoading} />
      </TabsContent>
      
      <TabsContent value="sectors" className="mt-0">
        <SectorOverviewSection sectors={news?.sectors || []} isLoading={isLoading} />
      </TabsContent>
    </Tabs>
  );
};

export default NewsTabs;



====================================================================
üìÅ FILE: src/components/news/TrendingStocksSection.tsx
====================================================================

import { TrendingStock } from '@/types/news';
import { Card, CardContent } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import StockChart from '@/components/StockChart';
import { getSentimentIcon, getSentimentClass } from '@/utils/newsUtils';

interface TrendingStocksSectionProps {
  stocks: TrendingStock[];
  isLoading: boolean;
}

const TrendingStocksSection = ({ stocks, isLoading }: TrendingStocksSectionProps) => {
  if (isLoading) {
    return (
      <div className="space-y-6">
        <Skeleton className="h-6 w-64" />
        <div className="grid grid-cols-1 gap-6">
          {[...Array(3)].map((_, index) => (
            <Skeleton key={index} className="h-64 w-full rounded-lg" />
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <h2 className="text-xl font-semibold">Trending Stocks</h2>
      
      <StockChart />
      
      <div className="grid grid-cols-1 gap-4">
        {stocks.slice(0, 5).map((stock) => (
          <Card key={stock.symbol} className="overflow-hidden">
            <CardContent className="p-4">
              <div className="flex justify-between items-start">
                <div>
                  <div className="flex items-center gap-2">
                    <h3 className="font-medium">{stock.symbol}</h3>
                    <span className="text-sm text-muted-foreground">{stock.name}</span>
                  </div>
                  <div className="flex items-center mt-1">
                    <span className={`font-mono font-medium ${stock.change >= 0 ? 'text-green-500' : 'text-red-500'}`}>
                      {stock.change >= 0 ? '+' : ''}{stock.change}%
                    </span>
                    <div className="flex items-center ml-3 text-sm">
                      {getSentimentIcon(stock.sentiment)}
                      <span className={`ml-1 ${getSentimentClass(stock.sentiment)}`}>
                        {stock.sentiment}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="mt-3 text-sm">
                <h4 className="font-medium mb-1">Recent Headlines</h4>
                <ul className="space-y-1">
                  {stock.headlines.map((headline, index) => (
                    <li key={index} className="text-muted-foreground">‚Ä¢ {headline}</li>
                  ))}
                </ul>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
};

export default TrendingStocksSection;



====================================================================
üìÅ FILE: src/components/news/FinancialNewsSection.tsx
====================================================================

import { NewsItem } from '@/types/news';
import NewsCard from '@/components/NewsCard';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { getSentimentIcon, getSentimentColor } from '@/utils/newsUtils';

interface FinancialNewsSectionProps {
  news: NewsItem[];
  isLoading: boolean;
}

const FinancialNewsSection = ({ news, isLoading }: FinancialNewsSectionProps) => {
  if (isLoading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-6">
        {[...Array(4)].map((_, index) => (
          <div key={index} className="space-y-3">
            <Skeleton className="h-48 w-full rounded-lg" />
            <Skeleton className="h-4 w-3/4" />
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-full" />
            <div className="flex justify-between">
              <Skeleton className="h-3 w-20" />
              <Skeleton className="h-3 w-20" />
            </div>
          </div>
        ))}
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <h2 className="text-xl font-semibold">Financial Market News</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {news.map((item) => (
          <div key={item.id} className="relative">
            <NewsCard
              title={item.title}
              excerpt={item.excerpt}
              category={item.category}
              date={item.date}
              image={item.image}
              url={item.url}
            />
            {item.tickers && item.tickers.length > 0 && (
              <div className="absolute top-4 right-4 flex gap-2">
                {item.tickers.map((ticker) => (
                  <Badge key={ticker} variant="outline" className="bg-background/80 backdrop-blur-sm">
                    ${ticker}
                  </Badge>
                ))}
              </div>
            )}
            <div className="absolute top-4 left-4">
              <Badge variant="outline" className={`flex items-center gap-1 ${getSentimentColor(item.sentiment)}`}>
                {getSentimentIcon(item.sentiment)}
                <span className="capitalize">{item.sentiment}</span>
              </Badge>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default FinancialNewsSection;



====================================================================
üìÅ FILE: src/components/news/NewsSearchBar.tsx
====================================================================

import { Search, Filter, TrendingUp } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useNews } from '@/context/NewsContext';
import { useState } from 'react';

const NewsSearchBar = () => {
  const { searchQuery, setSearchQuery, searchNews, isLoading } = useNews();
  const [localQuery, setLocalQuery] = useState(searchQuery);

  const handleSearch = async () => {
    if (localQuery.trim()) {
      setSearchQuery(localQuery);
      await searchNews(localQuery);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  return (
    <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
      <div className="relative w-full sm:w-96">
        <Search className="absolute left-3 top-2.5 h-4 w-4 text-muted-foreground" />
        <input
          type="text"
          placeholder="Search news, stocks, or topics..."
          className="w-full pl-10 pr-4 py-2 rounded-md border border-border bg-background"
          value={localQuery}
          onChange={(e) => setLocalQuery(e.target.value)}
          onKeyPress={handleKeyPress}
          disabled={isLoading}
        />
      </div>
      <div className="flex items-center gap-2">
        <Button 
          variant="outline" 
          size="sm" 
          onClick={handleSearch}
          disabled={isLoading}
          className="gap-2"
        >
          <Search size={16} />
          <span>Search</span>
        </Button>
        <Button variant="outline" size="sm" className="gap-2">
          <Filter size={16} />
          <span>Filter</span>
        </Button>
        <Button variant="outline" size="sm" className="gap-2">
          <TrendingUp size={16} />
          <span>Sort</span>
        </Button>
      </div>
    </div>
  );
};

export default NewsSearchBar;



====================================================================
üìÅ FILE: src/components/news/WatchlistStockItem.tsx
====================================================================

import { Button } from '@/components/ui/button';
import { X } from 'lucide-react';

interface WatchlistStockItemProps {
  symbol: string;
  watchlistId: string;
  onRemove: (watchlistId: string, symbol: string) => void;
}

const WatchlistStockItem = ({ symbol, watchlistId, onRemove }: WatchlistStockItemProps) => {
  return (
    <div className="flex justify-between items-center p-2 hover:bg-muted rounded-md">
      <span className="font-mono font-medium">${symbol}</span>
      <Button 
        variant="ghost" 
        size="sm" 
        onClick={() => onRemove(watchlistId, symbol)}
        className="h-8 w-8 p-0"
      >
        <X className="h-4 w-4" />
      </Button>
    </div>
  );
};

export default WatchlistStockItem;



====================================================================
üìÅ FILE: src/components/news/WatchlistForm.tsx
====================================================================

import { useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Save, X } from 'lucide-react';

interface WatchlistFormProps {
  onSave: (name: string) => void;
  onCancel: () => void;
}

const WatchlistForm = ({ onSave, onCancel }: WatchlistFormProps) => {
  const [name, setName] = useState('');

  const handleSave = () => {
    if (name.trim()) {
      onSave(name);
      setName('');
    }
  };

  return (
    <Card className="mb-4">
      <CardContent className="p-4">
        <div className="space-y-3">
          <h3 className="font-medium">Create New Watchlist</h3>
          <Input
            placeholder="Watchlist name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="w-full"
          />
          <div className="flex gap-2">
            <Button onClick={handleSave} size="sm" className="w-full">
              <Save className="h-4 w-4 mr-2" />
              <span>Save</span>
            </Button>
            <Button 
              variant="outline" 
              size="sm" 
              onClick={onCancel}
              className="w-full"
            >
              <X className="h-4 w-4 mr-2" />
              <span>Cancel</span>
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default WatchlistForm;



====================================================================
üìÅ FILE: src/components/news/GlobalNewsSection.tsx
====================================================================

import { NewsItem } from '@/types/news';
import NewsCard from '@/components/NewsCard';
import { Skeleton } from '@/components/ui/skeleton';

interface GlobalNewsSectionProps {
  news: NewsItem[];
  isLoading: boolean;
}

const GlobalNewsSection = ({ news, isLoading }: GlobalNewsSectionProps) => {
  if (isLoading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-6">
        {[...Array(4)].map((_, index) => (
          <div key={index} className="space-y-3">
            <Skeleton className="h-48 w-full rounded-lg" />
            <Skeleton className="h-4 w-3/4" />
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-full" />
            <div className="flex justify-between">
              <Skeleton className="h-3 w-20" />
              <Skeleton className="h-3 w-20" />
            </div>
          </div>
        ))}
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <h2 className="text-xl font-semibold">Global Economic News</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {news.map((item) => (
          <NewsCard
            key={item.id}
            title={item.title}
            excerpt={item.excerpt}
            category={item.category}
            date={item.date}
            image={item.image}
            url={item.url}
          />
        ))}
      </div>
    </div>
  );
};

export default GlobalNewsSection;



====================================================================
üìÅ FILE: src/components/news/SectorOverviewSection.tsx
====================================================================

import { SectorData } from '@/types/news';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { getSentimentIcon } from '@/utils/newsUtils';

interface SectorOverviewSectionProps {
  sectors: SectorData[];
  isLoading: boolean;
}

const SectorOverviewSection = ({ sectors, isLoading }: SectorOverviewSectionProps) => {
  if (isLoading) {
    return (
      <div className="space-y-6">
        <Skeleton className="h-6 w-64" />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {[...Array(4)].map((_, index) => (
            <Skeleton key={index} className="h-64 w-full rounded-lg" />
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <h2 className="text-xl font-semibold">Sector Overview</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {sectors.map((sector) => (
          <Card key={sector.name} className="overflow-hidden">
            <CardHeader className="pb-2">
              <div className="flex justify-between items-center">
                <CardTitle className="text-lg">{sector.name}</CardTitle>
                <div className="flex items-center gap-2">
                  <span className={`font-medium ${sector.change >= 0 ? 'text-green-500' : 'text-red-500'}`}>
                    {sector.change >= 0 ? '+' : ''}{sector.change}%
                  </span>
                  {getSentimentIcon(sector.sentiment)}
                </div>
              </div>
            </CardHeader>
            <CardContent className="pb-4">
              <h4 className="text-sm font-medium mb-3">Top Performing Stocks</h4>
              <div className="space-y-3">
                {sector.topStocks.map((stock) => (
                  <div key={stock.symbol} className="flex justify-between items-center">
                    <div className="flex items-center gap-2">
                      <span className="font-medium">{stock.symbol}</span>
                      <span className="text-xs text-muted-foreground">{stock.name}</span>
                    </div>
                    <span className={`font-mono text-sm ${stock.change >= 0 ? 'text-green-500' : 'text-red-500'}`}>
                      {stock.change >= 0 ? '+' : ''}{stock.change}%
                    </span>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
};

export default SectorOverviewSection;



====================================================================
üìÅ FILE: src/components/NewsCard.tsx
====================================================================

import { Card, CardContent, CardFooter } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { ArrowRight } from 'lucide-react';

interface NewsCardProps {
  title: string;
  excerpt: string;
  category: string;
  date: string;
  image: string;
  url: string;
}

const NewsCard = ({ title, excerpt, category, date, image, url }: NewsCardProps) => {
  return (
    <Card className="overflow-hidden border-border group card-hover">
      <div className="aspect-[16/9] overflow-hidden bg-muted">
        <img 
          src={image} 
          alt={title} 
          className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
          loading="lazy"
        />
      </div>
      <CardContent className="p-5">
        <div className="flex items-center justify-between mb-3">
          <Badge variant="outline" className="text-xs font-normal">
            {category}
          </Badge>
          <span className="text-xs text-muted-foreground">{date}</span>
        </div>
        <h3 className="font-medium text-lg mb-2 line-clamp-2">{title}</h3>
        <p className="text-muted-foreground text-sm line-clamp-3">{excerpt}</p>
      </CardContent>
      <CardFooter className="px-5 pb-5 pt-0">
        <Button variant="outline" size="sm" className="w-full" asChild>
          <a href={url} target="_blank" rel="noopener noreferrer" className="flex items-center justify-center">
            <span>Read More</span>
            <ArrowRight size={14} className="ml-2" />
          </a>
        </Button>
      </CardFooter>
    </Card>
  );
};

export default NewsCard;



====================================================================
üìÅ FILE: src/context/NewsContext.tsx
====================================================================

import { createContext, useState, useContext, ReactNode, useCallback, useEffect } from 'react';
import { NewsData } from '@/types/news';
import { fetchNews } from '@/utils/newsAPI';

interface NewsContextType {
  searchQuery: string;
  setSearchQuery: (query: string) => void;
  activeCategory: string;
  setActiveCategory: (category: string) => void;
  isLoading: boolean;
  setIsLoading: (loading: boolean) => void;
  error: string | null;
  setError: (error: string | null) => void;
  activeFilter: string;
  setActiveFilter: (filter: string) => void;
  news: NewsData | null;
  refreshNews: () => Promise<void>;
  searchNews: (query: string) => Promise<void>;
}

const NewsContext = createContext<NewsContextType | undefined>(undefined);

export const NewsProvider = ({ children }: { children: ReactNode }) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [activeCategory, setActiveCategory] = useState('global');
  const [activeFilter, setActiveFilter] = useState('global');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [newsData, setNewsData] = useState<NewsData | null>(null);
  
  // Function to fetch news with a specific query
  const searchNews = useCallback(async (query: string = 'technology') => {
    setIsLoading(true);
    setError(null);
    try {
      const freshNews = await fetchNews(query);
      setNewsData(freshNews);
    } catch (err) {
      setError('Failed to fetch news data');
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Function to manually refresh news data
  const refreshNews = useCallback(async () => {
    await searchNews(searchQuery || 'technology');
  }, [searchNews, searchQuery]);

  // Load initial news data
  useEffect(() => {
    searchNews('technology');
  }, [searchNews]);

  return (
    <NewsContext.Provider
      value={{
        searchQuery,
        setSearchQuery,
        activeCategory,
        setActiveCategory,
        activeFilter,
        setActiveFilter,
        isLoading,
        setIsLoading,
        error,
        setError,
        news: newsData,
        refreshNews,
        searchNews
      }}
    >
      {children}
    </NewsContext.Provider>
  );
};

export const useNews = () => {
  const context = useContext(NewsContext);
  if (context === undefined) {
    throw new Error('useNews must be used within a NewsProvider');
  }
  return context;
};



====================================================================
üìÅ FILE: src/context/WatchlistContext.tsx
====================================================================

import { createContext, useState, useContext, ReactNode } from 'react';
import { Watchlist, WatchlistContextType } from '@/types/news';

// Initial watchlists
const INITIAL_WATCHLISTS: Watchlist[] = [
  {
    id: '1',
    name: 'Tech Stocks',
    stocks: ['AAPL', 'MSFT', 'GOOGL', 'META', 'AMZN']
  },
  {
    id: '2',
    name: 'Energy Sector',
    stocks: ['XOM', 'CVX', 'COP', 'BP', 'SLB']
  },
  {
    id: '3',
    name: 'Crypto',
    stocks: ['BTC', 'ETH', 'SOL', 'ADA', 'DOT']
  }
];

const WatchlistContext = createContext<WatchlistContextType | undefined>(undefined);

export const WatchlistProvider = ({ children }: { children: ReactNode }) => {
  const [watchlists, setWatchlists] = useState<Watchlist[]>(INITIAL_WATCHLISTS);
  const [activeWatchlist, setActiveWatchlist] = useState<string>(INITIAL_WATCHLISTS[0].id);

  const addWatchlist = (name: string) => {
    if (name.trim()) {
      const newWatchlist: Watchlist = {
        id: Date.now().toString(),
        name,
        stocks: []
      };
      setWatchlists([...watchlists, newWatchlist]);
      setActiveWatchlist(newWatchlist.id);
    }
  };

  const removeWatchlist = (id: string) => {
    const filteredWatchlists = watchlists.filter(wl => wl.id !== id);
    setWatchlists(filteredWatchlists);
    if (activeWatchlist === id && filteredWatchlists.length > 0) {
      setActiveWatchlist(filteredWatchlists[0].id);
    }
  };

  const addStockToWatchlist = (watchlistId: string, symbol: string) => {
    if (symbol.trim()) {
      setWatchlists(watchlists.map(wl => {
        if (wl.id === watchlistId && !wl.stocks.includes(symbol.toUpperCase())) {
          return {
            ...wl,
            stocks: [...wl.stocks, symbol.toUpperCase()]
          };
        }
        return wl;
      }));
    }
  };

  const removeStockFromWatchlist = (watchlistId: string, symbol: string) => {
    setWatchlists(watchlists.map(wl => {
      if (wl.id === watchlistId) {
        return {
          ...wl,
          stocks: wl.stocks.filter(s => s !== symbol)
        };
      }
      return wl;
    }));
  };

  return (
    <WatchlistContext.Provider value={{
      watchlists,
      activeWatchlist,
      setActiveWatchlist,
      addWatchlist,
      removeWatchlist,
      addStockToWatchlist,
      removeStockFromWatchlist
    }}>
      {children}
    </WatchlistContext.Provider>
  );
};

export const useWatchlist = () => {
  const context = useContext(WatchlistContext);
  if (context === undefined) {
    throw new Error('useWatchlist must be used within a WatchlistProvider');
  }
  return context;
};



====================================================================
üìÅ FILE: src/hooks/useFetchNews.ts
====================================================================

import { useState, useEffect } from 'react';
import { NewsData } from '@/types/news';
import { fetchNews } from '@/utils/newsAPI';

export const useFetchNews = () => {
  const [news, setNews] = useState<NewsData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchNewsData = async () => {
      try {
        setIsLoading(true);
        
        // Fetch real news data from NewsAPI.ai
        const newsData = await fetchNews();
        setNews(newsData);
        setIsLoading(false);
      } catch (err) {
        setError('Failed to fetch news data');
        setIsLoading(false);
      }
    };

    fetchNewsData();
  }, []);

  return { news, isLoading, error };
};



====================================================================
üìÅ FILE: src/types/news.ts
====================================================================

export type SentimentType = 'bullish' | 'bearish' | 'neutral';

export interface NewsItem {
  id: string;
  title: string;
  excerpt: string;
  category: string;
  date: string;
  source: string;
  image: string;
  url: string;
  sentiment: SentimentType;
  tickers?: string[];
}

export interface TrendingStock {
  symbol: string;
  name: string;
  change: number;
  sentiment: SentimentType;
  headlines: string[];
}

export interface SectorStock {
  symbol: string;
  name: string;
  change: number;
}

export interface SectorData {
  name: string;
  change: number;
  sentiment: SentimentType;
  topStocks: SectorStock[];
}

export interface NewsData {
  global: NewsItem[];
  financial: NewsItem[];
  trendingStocks: TrendingStock[];
  sectors: SectorData[];
}

export interface Watchlist {
  id: string;
  name: string;
  stocks: string[];
}

export interface WatchlistContextType {
  watchlists: Watchlist[];
  activeWatchlist: string;
  setActiveWatchlist: (id: string) => void;
  addWatchlist: (name: string) => void;
  removeWatchlist: (id: string) => void;
  addStockToWatchlist: (watchlistId: string, symbol: string) => void;
  removeStockFromWatchlist: (watchlistId: string, symbol: string) => void;
}



====================================================================
üìÅ FILE: src/utils/newsAPI.ts
====================================================================

import { toast } from "sonner";
import { NewsData, NewsItem, SentimentType } from "@/types/news";

// News API key
const NEWS_API_KEY = "d419d653d7834787b58583906ace65e0";

export interface NewsAPIResponse {
  status: string;
  totalResults: number;
  articles: {
    source: {
      id: string | null;
      name: string;
    };
    author: string | null;
    title: string;
    description: string | null;
    url: string;
    urlToImage: string | null;
    publishedAt: string;
    content: string | null;
  }[];
}

export const fetchNews = async (query: string = "technology"): Promise<NewsData> => {
  try {
    const response = await fetch(
      `https://newsapi.org/v2/everything?q=${encodeURIComponent(query)}&pageSize=12&sortBy=publishedAt&language=en&apiKey=${NEWS_API_KEY}`
    );
    
    if (!response.ok) {
      throw new Error(`API request failed with status ${response.status}`);
    }
    
    const data = await response.json() as NewsAPIResponse;
    
    if (data.status !== "ok" || !data.articles) {
      throw new Error("Invalid API response");
    }
    
    // Process the news data into our format
    const processedData: NewsData = {
      global: [],
      financial: [],
      trendingStocks: [],
      sectors: []
    };
    
    // Convert News API articles to our NewsItem format
    data.articles.forEach((article, index) => {
      // Determine category based on content
      let category = "General";
      const title = article.title.toLowerCase();
      const description = (article.description || "").toLowerCase();
      
      if (title.includes("bitcoin") || title.includes("crypto") || description.includes("crypto")) {
        category = "Crypto";
      } else if (title.includes("stock") || title.includes("market") || description.includes("investment")) {
        category = "Stocks";
      } else if (title.includes("economy") || title.includes("gdp") || description.includes("economy")) {
        category = "Economy";
      } else if (title.includes("tech") || title.includes("ai") || description.includes("technology")) {
        category = "Technology";
      }
      
      // Create news item
      const newsItem: NewsItem = {
        id: `news-${index}`,
        title: article.title,
        excerpt: article.description || article.content?.substring(0, 200) + '...' || 'No description available',
        category: category,
        date: new Date(article.publishedAt).toLocaleDateString('en-US', { 
          month: 'short', 
          day: 'numeric', 
          year: 'numeric' 
        }),
        source: article.source.name,
        image: article.urlToImage || 'https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?auto=format&fit=crop&w=800&q=80',
        url: article.url,
        sentiment: getRandomSentiment() // Since News API doesn't provide sentiment
      };
      
      // Categorize articles
      if (category === "Economy" || category === "Global") {
        processedData.global.push(newsItem);
      } else {
        processedData.financial.push(newsItem);
      }
    });
    
    // Ensure we have some data in each category
    if (processedData.global.length === 0 && processedData.financial.length > 0) {
      processedData.global = processedData.financial.slice(0, Math.min(4, processedData.financial.length));
    }
    
    if (processedData.financial.length === 0 && processedData.global.length > 0) {
      processedData.financial = processedData.global.slice(0, Math.min(4, processedData.global.length));
    }
    
    // Add mock data for trending stocks and sectors (which News API doesn't provide)
    const { trendingStocks, sectors } = getMockStocksAndSectors();
    processedData.trendingStocks = trendingStocks;
    processedData.sectors = sectors;
    
    return processedData;
  } catch (error) {
    console.error('Error fetching news data:', error);
    toast.error("Failed to fetch news data. Please try again later.");
    return getMockNewsData();
  }
};

// Helper function to generate random sentiment since News API doesn't provide it
function getRandomSentiment(): SentimentType {
  const sentiments: SentimentType[] = ['bullish', 'bearish', 'neutral'];
  return sentiments[Math.floor(Math.random() * sentiments.length)];
}

// Mock data to use as fallback
function getMockNewsData(): NewsData {
  return {
    global: [
      {
        id: '1',
        title: 'Fed Signals Potential Rate Cuts as Inflation Cools',
        excerpt: 'The Federal Reserve has indicated it may begin cutting interest rates soon as inflation shows signs of moderating.',
        category: 'Economy',
        date: 'Aug 28, 2023',
        source: 'Financial Times',
        image: 'https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?auto=format&fit=crop&q=80&w=1470',
        url: '#',
        sentiment: 'bullish'
      },
      {
        id: '2',
        title: 'Global Supply Chain Issues Easing, Report Suggests',
        excerpt: 'Recent data indicates global supply chain bottlenecks are easing, potentially relieving inflation pressures.',
        category: 'Supply Chain',
        date: 'Aug 27, 2023',
        source: 'Bloomberg',
        image: 'https://images.unsplash.com/photo-1578575437130-527eed3abbec?auto=format&fit=crop&q=80&w=1470',
        url: '#',
        sentiment: 'bullish'
      }
    ],
    financial: [
      {
        id: '5',
        title: 'Tesla Announces Major Expansion in Battery Production',
        excerpt: 'Tesla revealed plans to significantly increase battery production capacity to meet growing electric vehicle demand.',
        category: 'Stocks',
        date: 'Aug 28, 2023',
        source: 'CNBC',
        image: 'https://images.unsplash.com/photo-1560958089-b8a1929cea89?auto=format&fit=crop&q=80&w=1470',
        url: '#',
        sentiment: 'bullish',
        tickers: ['TSLA']
      }
    ],
    trendingStocks: getMockStocksAndSectors().trendingStocks,
    sectors: getMockStocksAndSectors().sectors
  };
}

// Helper to get mock stocks and sectors
function getMockStocksAndSectors() {
  return {
    trendingStocks: [
      { symbol: 'NVDA', name: 'NVIDIA Corporation', change: 4.28, sentiment: 'bullish' as SentimentType, headlines: ['NVIDIA Showcases New AI Chips', 'Analysts Raise NVIDIA Price Targets'] },
      { symbol: 'AAPL', name: 'Apple Inc.', change: -1.53, sentiment: 'bearish' as SentimentType, headlines: ['Apple Supplier Reports Production Delays', 'iPhone 15 Demand Concerns Emerge'] },
      { symbol: 'TSLA', name: 'Tesla Inc.', change: 2.76, sentiment: 'bullish' as SentimentType, headlines: ['Tesla Announces Battery Production Expansion', 'Tesla Deliveries Expected to Beat Estimates'] },
      { symbol: 'META', name: 'Meta Platforms Inc.', change: 1.15, sentiment: 'bullish' as SentimentType, headlines: ['Meta Reports Strong Ad Revenue Growth', 'Horizon Worlds Sees User Increase'] },
      { symbol: 'AMZN', name: 'Amazon.com Inc.', change: 0.25, sentiment: 'neutral' as SentimentType, headlines: ['Amazon Warehouse Expansion', 'AWS Growth Slows Slightly'] },
    ],
    sectors: [
      {
        name: 'Technology',
        change: 2.3,
        sentiment: 'bullish' as SentimentType,
        topStocks: [
          { symbol: 'NVDA', name: 'NVIDIA Corporation', change: 4.28 },
          { symbol: 'AAPL', name: 'Apple Inc.', change: -1.53 },
          { symbol: 'MSFT', name: 'Microsoft Corp.', change: 0.87 }
        ]
      },
      {
        name: 'Healthcare',
        change: 0.8,
        sentiment: 'neutral' as SentimentType,
        topStocks: [
          { symbol: 'JNJ', name: 'Johnson & Johnson', change: 0.45 },
          { symbol: 'PFE', name: 'Pfizer Inc.', change: -0.75 },
          { symbol: 'UNH', name: 'UnitedHealth Group', change: 1.28 }
        ]
      }
    ]
  };
}



====================================================================
üìÅ FILE: src/utils/newsUtils.tsx
====================================================================

import { ArrowUpRight, ArrowDownRight, Minus } from 'lucide-react';

export const getSentimentIcon = (sentiment: string) => {
  switch (sentiment) {
    case 'bullish':
      return <ArrowUpRight className="h-4 w-4 text-green-500" />;
    case 'bearish':
      return <ArrowDownRight className="h-4 w-4 text-red-500" />;
    default:
      return <Minus className="h-4 w-4 text-gray-500" />;
  }
};

export const getSentimentColor = (sentiment: string) => {
  switch (sentiment) {
    case 'bullish':
      return 'bg-green-500/10 text-green-500 border-green-500/20';
    case 'bearish':
      return 'bg-red-500/10 text-red-500 border-red-500/20';
    default:
      return 'bg-gray-500/10 text-gray-500 border-gray-500/20';
  }
};

export const getSentimentClass = (sentiment: string) => {
  switch (sentiment) {
    case 'bullish':
      return 'text-green-500';
    case 'bearish':
      return 'text-red-500';
    default:
      return 'text-gray-500';
  }
};



====================================================================
üìÅ FILE: src/utils/alphaVantageAPI.ts
====================================================================
import { toast } from "sonner";

// Alpha Vantage API key
const ALPHA_VANTAGE_API_KEY = "M6N4JMMF4KTQOVEN";

export interface StockData {
  date: string;
  value: number;
}

export interface StockMetadata {
  symbol: string;
  name: string;
  lastRefreshed: string;
  timeZone: string;
}

export interface StockDataResponse {
  metadata: StockMetadata;
  data: StockData[];
  changePercent: number;
}

// Function to fetch time series data for a specific stock
export const fetchStockTimeSeries = async (
  symbol: string,
  interval: 'daily' | 'weekly' | 'monthly' = 'daily',
  outputSize: 'compact' | 'full' = 'compact'
): Promise<StockDataResponse> => {
  try {
    let functionName;
    switch (interval) {
      case 'weekly':
        functionName = 'TIME_SERIES_WEEKLY';
        break;
      case 'monthly':
        functionName = 'TIME_SERIES_MONTHLY';
        break;
      case 'daily':
      default:
        functionName = 'TIME_SERIES_DAILY';
        break;
    }

    const url = `https://www.alphavantage.co/query?function=${functionName}&symbol=${symbol}&outputsize=${outputSize}&apikey=${ALPHA_VANTAGE_API_KEY}`;
    
    const response = await fetch(url);
    
    if (!response.ok) {
      throw new Error(`API request failed with status ${response.status}`);
    }
    
    const jsonData = await response.json();
    
    // Handle API error responses
    if (jsonData['Error Message']) {
      throw new Error(jsonData['Error Message']);
    }
    
    if (jsonData['Note']) {
      console.warn('Alpha Vantage API limit note:', jsonData['Note']);
      toast.warning("API rate limit reached. Some data may be stale.");
    }
    
    // Parse the response based on the interval
    let timeSeriesKey;
    switch (interval) {
      case 'weekly':
        timeSeriesKey = 'Weekly Time Series';
        break;
      case 'monthly':
        timeSeriesKey = 'Monthly Time Series';
        break;
      case 'daily':
      default:
        timeSeriesKey = 'Time Series (Daily)';
        break;
    }
    
    const timeSeries = jsonData[timeSeriesKey];
    const metaData = jsonData['Meta Data'];
    
    if (!timeSeries || !metaData) {
      throw new Error('Invalid response format from Alpha Vantage API');
    }
    
    // Convert time series data to our format
    const stockData: StockData[] = [];
    const dates = Object.keys(timeSeries).sort((a, b) => new Date(a).getTime() - new Date(b).getTime());
    
    dates.forEach((date) => {
      stockData.push({
        date: date,
        value: parseFloat(timeSeries[date]['4. close'])
      });
    });
    
    // Calculate percent change
    const firstValue = parseFloat(timeSeries[dates[0]]['4. close']);
    const lastValue = parseFloat(timeSeries[dates[dates.length - 1]]['4. close']);
    const changePercent = ((lastValue - firstValue) / firstValue) * 100;
    
    return {
      metadata: {
        symbol: metaData['2. Symbol'],
        name: symbol, // Alpha Vantage doesn't provide company name, only symbol
        lastRefreshed: metaData['3. Last Refreshed'],
        timeZone: metaData['5. Time Zone'] || 'US/Eastern'
      },
      data: stockData,
      changePercent: Number(changePercent.toFixed(2))
    };
  } catch (error) {
    console.error('Error fetching stock data:', error);
    toast.error("Failed to fetch stock data. Using sample data instead.");
    throw error;
  }
};

// Function to fetch multiple stocks data
export const fetchMultipleStocks = async (
  symbols: string[],
  interval: 'daily' | 'weekly' | 'monthly' = 'daily',
): Promise<Record<string, StockDataResponse>> => {
  const results: Record<string, StockDataResponse> = {};
  
  // For demo purposes, we use Promise.all, but in production,
  // you might want to implement rate limiting
  try {
    const stockDataPromises = symbols.map(symbol => 
      fetchStockTimeSeries(symbol, interval)
        .then(data => {
          results[symbol] = data;
        })
        .catch(error => {
          console.error(`Error fetching data for ${symbol}:`, error);
          // Return null for failed requests
          return null;
        })
    );
    
    await Promise.all(stockDataPromises);
    return results;
  } catch (error) {
    console.error('Error fetching multiple stocks:', error);
    toast.error("Failed to fetch stock data. Using fallback data.");
    throw error;
  }
};

// Get the appropriate time range for interval
export const getTimeRangeForInterval = (interval: 'daily' | 'weekly' | 'monthly'): number => {
  switch (interval) {
    case 'weekly':
      return 90; // ~3 months
    case 'monthly':
      return 365; // ~1 year
    case 'daily':
    default:
      return 30; // ~1 month
  }
};

// Map Alpha Vantage interval to days for UI display
export const intervalToDays = (interval: 'daily' | 'weekly' | 'monthly'): number => {
  switch (interval) {
    case 'weekly':
      return 90;
    case 'monthly':
      return 365;
    case 'daily':
    default:
      return 30;
  }
};

// Generate fallback data if API fails
export const generateFallbackData = (
  symbol: string, 
  name: string, 
  trend: 'up' | 'down' | 'flat', 
  days: number
): StockDataResponse => {
  const data = [];
  let lastValue = trend === 'up' ? 150 : trend === 'down' ? 250 : 200;
  const startDate = new Date();
  startDate.setDate(startDate.getDate() - days);

  for (let i = 0; i < days; i++) {
    const currentDate = new Date(startDate);
    currentDate.setDate(startDate.getDate() + i);
    
    // Create random fluctuations
    const change = trend === 'up' 
      ? Math.random() * 10 - 3  // Upward trend: more likely to go up
      : trend === 'down' 
        ? Math.random() * 10 - 7  // Downward trend: more likely to go down
        : Math.random() * 6 - 3;  // Flat trend: equal chance of up or down
    
    lastValue = Math.max(50, lastValue + change);
    data.push({
      date: currentDate.toISOString().split('T')[0],
      value: lastValue
    });
  }
  
  const firstValue = data[0].value;
  const lastValueData = data[data.length - 1].value;
  const changePercent = ((lastValueData - firstValue) / firstValue) * 100;
  
  return {
    metadata: {
      symbol,
      name,
      lastRefreshed: new Date().toISOString(),
      timeZone: 'US/Eastern'
    },
    data,
    changePercent: Number(changePercent.toFixed(2))
  };
};



